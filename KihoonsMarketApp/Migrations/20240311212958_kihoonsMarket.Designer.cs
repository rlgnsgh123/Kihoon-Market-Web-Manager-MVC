// <auto-generated />
using System;
using KihoonShopApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KihoonMarketApp.Migrations
{
    [DbContext(typeof(KihoonShopDbContext))]
    [Migration("20240311212958_kihoonsMarket")]
    partial class kihoonsMarket
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KihoonShopes.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvinceOrState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ZipOrPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address1 = "549 Bluebeech BLVD",
                            City = "Waterloo",
                            ContactEmail = "1@gmail.comm",
                            ContactFirstName = "kihoon",
                            ContactLastName = "kim",
                            IsDeleted = false,
                            Name = "AKihoon",
                            Phone = "000-000-0000",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "N2V2TR"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address1 = "649 Bluebeech BLVD",
                            City = "Toronto",
                            ContactEmail = "2@gmail.comm",
                            ContactFirstName = "jihoon",
                            ContactLastName = "lim",
                            IsDeleted = false,
                            Name = "DKihoon",
                            Phone = "111-000-0000",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "N2V2T2"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address1 = "59 Bluebeech BLVD",
                            City = "Cambridge",
                            ContactEmail = "3@gmail.comm",
                            ContactFirstName = "FFFoon",
                            ContactLastName = "Smith",
                            IsDeleted = false,
                            Name = "EKihoon",
                            Phone = "000-000-2222",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "B2V2TR"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address1 = "366 Bluebeech BLVD",
                            City = "Waterloo",
                            ContactEmail = "4@gmail.comm",
                            ContactFirstName = "stefan",
                            ContactLastName = "Siwert",
                            IsDeleted = false,
                            Name = "HKihoon",
                            Phone = "444-000-0000",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "N2V2TR"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address1 = "236 BlNuebeech BLVD",
                            City = "Waterloo",
                            ContactEmail = "5@gmail.comm",
                            ContactFirstName = "Noah",
                            ContactLastName = "Lee",
                            IsDeleted = false,
                            Name = "NKihoon",
                            Phone = "555-555-5555",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "N2V2TR"
                        },
                        new
                        {
                            CustomerId = 6,
                            Address1 = "7 Bluebeech BLVD",
                            City = "Seoul",
                            ContactEmail = "6@gmail.comm",
                            ContactFirstName = "jimyung",
                            ContactLastName = "jeong",
                            IsDeleted = false,
                            Name = "YKihoon",
                            Phone = "666-666-7777",
                            ProvinceOrState = "KR",
                            ZipOrPostalCode = "N2V2SR"
                        },
                        new
                        {
                            CustomerId = 7,
                            Address1 = "123 Bluebeech BLVD",
                            City = "Kitchener",
                            ContactEmail = "7@gmail.comm",
                            ContactFirstName = "kihoon",
                            ContactLastName = "kim",
                            IsDeleted = false,
                            Name = "JKihoon",
                            Phone = "898-000-1254",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "M2V2TR"
                        },
                        new
                        {
                            CustomerId = 8,
                            Address1 = "275 Bluebeech BLVD",
                            City = "Waterloo",
                            ContactEmail = "8@gmail.comm",
                            ContactFirstName = "kurt",
                            ContactLastName = "park",
                            IsDeleted = false,
                            Name = "LKihoon",
                            Phone = "888-000-0120",
                            ProvinceOrState = "CA",
                            ZipOrPostalCode = "N2V2TR"
                        });
                });

            modelBuilder.Entity("KihoonShopes.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentTermsId")
                        .HasColumnType("int");

                    b.Property<double?>("PaymentTotal")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTermsId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            CustomerId = 1,
                            InvoiceDate = new DateTime(2022, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 2,
                            CustomerId = 1,
                            InvoiceDate = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 3,
                            CustomerId = 2,
                            InvoiceDate = new DateTime(2022, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 4,
                            CustomerId = 2,
                            InvoiceDate = new DateTime(2022, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 4,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 5,
                            CustomerId = 3,
                            InvoiceDate = new DateTime(2022, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 6,
                            CustomerId = 3,
                            InvoiceDate = new DateTime(2022, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 4,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 7,
                            CustomerId = 4,
                            InvoiceDate = new DateTime(2022, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 8,
                            CustomerId = 4,
                            InvoiceDate = new DateTime(2022, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 5,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 9,
                            CustomerId = 5,
                            InvoiceDate = new DateTime(2022, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 10,
                            CustomerId = 6,
                            InvoiceDate = new DateTime(2022, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 11,
                            CustomerId = 7,
                            InvoiceDate = new DateTime(2022, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 2,
                            PaymentTotal = 0.0
                        },
                        new
                        {
                            InvoiceId = 12,
                            CustomerId = 8,
                            InvoiceDate = new DateTime(2022, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTermsId = 3,
                            PaymentTotal = 0.0
                        });
                });

            modelBuilder.Entity("KihoonShopes.Entities.InvoiceLineItem", b =>
                {
                    b.Property<int>("InvoiceLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceLineItemId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceLineItemId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceLineItems");

                    b.HasData(
                        new
                        {
                            InvoiceLineItemId = 1,
                            Amount = 70.989999999999995,
                            Description = "Kimchi",
                            InvoiceId = 1
                        },
                        new
                        {
                            InvoiceLineItemId = 2,
                            Amount = 10.5,
                            Description = "Normal Gimbab",
                            InvoiceId = 1
                        },
                        new
                        {
                            InvoiceLineItemId = 3,
                            Amount = 12.5,
                            Description = "Bulgogi Gimbab",
                            InvoiceId = 2
                        },
                        new
                        {
                            InvoiceLineItemId = 4,
                            Amount = 11.5,
                            Description = "Vegi Gimbab",
                            InvoiceId = 2
                        },
                        new
                        {
                            InvoiceLineItemId = 5,
                            Amount = 15.5,
                            Description = "Red Chicken",
                            InvoiceId = 3
                        },
                        new
                        {
                            InvoiceLineItemId = 6,
                            Amount = 16.899999999999999,
                            Description = "White Chicken",
                            InvoiceId = 3
                        },
                        new
                        {
                            InvoiceLineItemId = 7,
                            Amount = 17.5,
                            Description = "Honey Chicken",
                            InvoiceId = 4
                        },
                        new
                        {
                            InvoiceLineItemId = 8,
                            Amount = 20.5,
                            Description = "Tuna Sushi",
                            InvoiceId = 4
                        },
                        new
                        {
                            InvoiceLineItemId = 9,
                            Amount = 18.5,
                            Description = "Salmon Sushi",
                            InvoiceId = 5
                        },
                        new
                        {
                            InvoiceLineItemId = 10,
                            Amount = 40.5,
                            Description = "Sushi Set",
                            InvoiceId = 5
                        },
                        new
                        {
                            InvoiceLineItemId = 11,
                            Amount = 22.899999999999999,
                            Description = "Ramen",
                            InvoiceId = 6
                        },
                        new
                        {
                            InvoiceLineItemId = 12,
                            Amount = 19.5,
                            Description = "Kimchi Soup",
                            InvoiceId = 6
                        },
                        new
                        {
                            InvoiceLineItemId = 13,
                            Amount = 18.5,
                            Description = "Soybean Soup",
                            InvoiceId = 7
                        },
                        new
                        {
                            InvoiceLineItemId = 14,
                            Amount = 6.5,
                            Description = "Milkis",
                            InvoiceId = 8
                        },
                        new
                        {
                            InvoiceLineItemId = 15,
                            Amount = 15.5,
                            Description = "Bibimbab",
                            InvoiceId = 9
                        },
                        new
                        {
                            InvoiceLineItemId = 16,
                            Amount = 16.899999999999999,
                            Description = "Vegi Bibimbab",
                            InvoiceId = 9
                        },
                        new
                        {
                            InvoiceLineItemId = 17,
                            Amount = 11.5,
                            Description = "Mandu(10pc)",
                            InvoiceId = 10
                        },
                        new
                        {
                            InvoiceLineItemId = 18,
                            Amount = 9.5,
                            Description = "Bulgogi Bao",
                            InvoiceId = 10
                        },
                        new
                        {
                            InvoiceLineItemId = 19,
                            Amount = 8.5,
                            Description = "YangYum Bao",
                            InvoiceId = 11
                        },
                        new
                        {
                            InvoiceLineItemId = 20,
                            Amount = 20.5,
                            Description = "Bulgogi LunchBox",
                            InvoiceId = 11
                        },
                        new
                        {
                            InvoiceLineItemId = 21,
                            Amount = 26.5,
                            Description = "Pork Belly",
                            InvoiceId = 12
                        },
                        new
                        {
                            InvoiceLineItemId = 22,
                            Amount = 35.5,
                            Description = "Top Sironin",
                            InvoiceId = 12
                        });
                });

            modelBuilder.Entity("KihoonShopes.Entities.PaymentTerms", b =>
                {
                    b.Property<int>("PaymentTermsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTermsId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DueDays")
                        .HasColumnType("int");

                    b.HasKey("PaymentTermsId");

                    b.ToTable("PaymentTerms");

                    b.HasData(
                        new
                        {
                            PaymentTermsId = 1,
                            Description = "Net due 10 days",
                            DueDays = 10
                        },
                        new
                        {
                            PaymentTermsId = 2,
                            Description = "Net due 20 days",
                            DueDays = 20
                        },
                        new
                        {
                            PaymentTermsId = 3,
                            Description = "Net due 30 days",
                            DueDays = 30
                        },
                        new
                        {
                            PaymentTermsId = 4,
                            Description = "Net due 60 days",
                            DueDays = 60
                        },
                        new
                        {
                            PaymentTermsId = 5,
                            Description = "Net due 90 days",
                            DueDays = 90
                        });
                });

            modelBuilder.Entity("KihoonShopes.Entities.Invoice", b =>
                {
                    b.HasOne("KihoonShopes.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KihoonShopes.Entities.PaymentTerms", "PaymentTerms")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentTermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentTerms");
                });

            modelBuilder.Entity("KihoonShopes.Entities.InvoiceLineItem", b =>
                {
                    b.HasOne("KihoonShopes.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("KihoonShopes.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("KihoonShopes.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceLineItems");
                });

            modelBuilder.Entity("KihoonShopes.Entities.PaymentTerms", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
